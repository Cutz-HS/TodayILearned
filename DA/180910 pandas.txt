[python-analysis]▶
1. concat
 ▶ join_axes=index
 - index를 그대로 사용
 ▶ keys -> 계층구조 생성 (분리된 df마다의 이름)
  -> loc['keys']를 통해 접근 가능

 2. verify-integrity -> 중복이 있을 때 erro raise

 3. df.Series
 ▶ axis에 상관없이 새로운 행
 - key[(행,열)]
 - df.append(Series, ignore_index, verify_integrity, sort)

4. join / merge
 ▶ df+df
 - how(left, right, outer, inner)
 - suffixes -> overlapping col
   ▶ on='key' 키를 기준으로 합치기
  - indicator = True/False -> 부가정도 (merge 정보)
  - suffixes=('_left', '_right') -> default
  - left_index/on=T/F
  - right_index/on=T/F

5. join
 ▶ df.join(other, how='left,right,inner,outer')

6. 결측치처리
 ▶ 일반적으로 결측치를 평균으로 대체하지 않는다.
 -> KNN을 통해서 비슷한 클러스터의 비교의 value를 예측치로 제공한다.
 -> 강수량은 0도 의미가 있다. NaN의 경우, regression을 통해 예측값을 제공하기도 한다.
 -> DL에서 NaN이 나왔을 경우는 무한예측값이 나온 경우다.(infinity num) -> range를 벗어난 경우.
    ▶ 모델 재설계가 필요하다. 원인은? cost? learning_rate?

7. pandas: NaN, None
 - pd.isnull(df) -> T/F
 - pd.notnull(df) -> T/F
 - pd.iloc[[0,2],['a','b']] (0,'a')에서(2,'b'))
 - df.isnull().sum() -> column별 na개수 열 생성
 - fillna -> 임의치
 - dropna(method='pad'(정방향), limit=1(1칸만))
 - df.where(조건, false)
 - np.where(조건, True, F민ㄷ)

8. datetime
 ▶ from datetime import datetime
 - datelist = ['MM/DD/YYYY']
 ▶ datetime type으로 변경
  - pd.to_datetime(datelist)

9. interpolate() -> method='time' 시계열로 저장
  - interpolate(method='values') -> 선형적으로 NaN를 대체

10. replace
  ▶ df.replace({기존값:새로운값})의 형태로도 가능

11. 중복치 처리
 ▶ duplicated(['col'])
   - keep='first'/'last'/False -> 전자, 후자, 모두 제거
