##이상치 넣어서 제거해보기

x[98:100]=100
print(x)
print(np.mean(x))
print(np.std(x))
# plt.hist(x,bins=np.arange(0,102,2)) # bins=[0,2,4,6,.....100] 2간격으로 나눠짐.
# plt.show() #이상치 찾아보기

# x=x.reshape(-1,4) #행 = -1 너가 알아서 계산해
# x=x.reshape(4,-1)
x=x.reshape(-1,1) #100행 1열
print(x.shape)
# print(x[0:10])

xss = StandardScaler().fit_transform(x)
print(xss) ##이상치 2개발생
# plt.hist(xss)
# plt.show()

xss_in=xss[xss<5]
print(xss_in)
plt.hist(xss_in,bins=np.arange(-3.0,3.0,0.2))
plt.show()

print('='*50)
print(median(x)) #중앙값 9.917 #정중앙값 이상치 상관X.
print(mean(x)) # 평균 11.79 <- 이상치 크게 받음

Q1=percentile(x, 25, axis=0) # 1사분위수
Q3=percentile(x, 75, axis=0) # 3사분위수
print("1사분위수",Q1) # 8.77
print('3사분위수',Q3) # 11.39
IQR=Q3-Q1
print(IQR) #2.622

##이상치가 포함된 데이터의 중앙값과 IQR을 아용해서 표준화
x_rs = RobustScaler().fit_transform(x) #중앙값과 IQR을 통해서 표준화 함.
print(x_rs[-10:])
print(np.median(x_rs))
print(np.mean(x_rs))
print(np.std(x_rs))
x_rs_in=x_rs[x_rs<5]
plt.hist(x_rs_in, bins = np.arange(-3,3,0.2))
plt.show()
### StandardScaler()보다 RobustScaler()가 더 유용한 함수이다.




'''
# 정규화 : 최소값, 최대값 이용, 범위: 0 ~ 1
# 딥러닝 (인공신경망)
'''
import  numpy as np
import  pandas as pd
from sklearn.preprocessing import MinMaxScaler, minmax_scale, Binarizer,binarize
##          중간 기말 등수
X= np.array([[10.,-10.,1.],
             [5.,0.,2.],
             [0.,10.,3.]])
# print(X-X.min(axis=0))

##------------------------------------------정규화----------------------------------------------------------------------
print( (X-X.min(axis=0))/(X.max(axis=0)-X.min(axis=0))) #각각의 값- 최솟값 / 최댓값 - 최솟값
##정규화 식
print('='*50)
mms=MinMaxScaler()
xmms=mms.fit_transform(X)
print(xmms)
##정규화 식
print('='*50)
xmms2=minmax_scale(X, axis=0, copy=True) #copy=True : 원본변화없이 복사해서 사용
print(xmms2)

##-----------------------------------------이진화-----------------------------------------------------------------------
## (이진화(0,1) : 연속형 변수 -> 0 또는 1로 변환
## 임계값(threshold) : 변환 기준 값
## 나중에 당뇨병 유/무 출력 모델 만들때, 0 ~ 1 => 0.75가 나오면??  임계값에 따라 결정 ex)0.8 크면 1 작으면 0

X= np.array([[10.,-10.,1.],
             [5.,0.,2.],
             [0.,10.,3.]])

binarizer=Binarizer().fit(X)
print(binarizer)
print(binarizer.transform(X))
print('='*50)
binarizer = Binarizer(threshold=2.0) #2를 기준으로
print(binarizer.transform(X))
print('='*50)
print(binarize(X))
print(binarize(X,threshold=2.0))

##---------------------------------------범주형 변수 -> 이진화 ---------------------------------------------------------
## 성별 : 남(0),여(1)로 인코딩
## 연령 : 20대(0), 30대(1), 40대(2), 50대(3)로 인코딩
## 성적 : A(0), B(1),...F(5)로 인코딩
## SN 성별 연령대 성적
##  1   0     0     4  범주형 데이터는 => 원핫 인코딩 부터 해야
##  2   1     3     2

## 원핫 인코딩(각 자리가 0이냐 1이냐)
## 성별(0,1) => 0:10, 1:01
## 연령(0~3) => 0 :1000, 1:0100 ,2 : 0010, 3: 0001

## 지역(서울 : 0, 부산:1, 강원:2....) - 숫자 사이의 관계가 없지만 관계가 생긴다.

## 번호판 판별기
#1)원핫 인코딩
#  52가 1234
# 5 :000010000
# 2 :001000000
# 가
# 1
# 2
# 3
# 4
#2) 코드를 판별기에 입력
#3) 판별기는 판별 결과를
# 0 0 0.05 0 0 0.9 0.05 0 0 0
#0 0 0 0 0 1 0 0 0 0 => 5

from sklearn.preprocessing import OneHotEncoder
data_train= np.array([[0,0,0],
                      [0, 1, 1],
                      [0, 2, 2],
                      [1, 0, 3],
                      [1, 1, 4]])

print('='*50)
enc=OneHotEncoder()
print(enc.fit(data_train))
print(enc.active_features_)
print(enc.n_values_)