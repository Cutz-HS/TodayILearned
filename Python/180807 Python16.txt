[python-analysis]¢º
1. comprehension
 va=[Ç¥Çö½Ä for var1 in iterator (if condition) for var2 in iterator (if condition)...]
 ¢º else¹®À» ¾²°í ½Í´Ù¸é, va=[Ç¥Çö½Ä if ~ else ~ for¹®]

2. .join()
 ¢º str.join(list) str°ú listÀÇ ÇÑ ¿ä¼Ò¾¿ ÇÕÃÄ¼­ STR·Î ¸®ÅÏÇÑ´Ù.
   -> strÀº ³»ºÎ¿ä¼ÒÀÏ ÇÊ¿ä°¡ ¾ø´Ù.

3. ¹®ÀÚ¿­ Á¶°Ç
 ¢º if not in "str"

4. class&module
 ¢º ½ÇÃ¼´Â ¾øÁö¸¸ °´Ã¼ÀÇ Æ²ÀÌ Á¸ÀçÇÏ´Â °Í
 ¢º module: Å¬·¡½º ³»¿¡¼­ ½ÇÁ¦ ±â´ÉÀ» ÇÏ´Â ÇÔ¼ö(¸Ş¼Òµå)
 - import¹®À» Áß°£¿¡ ÇØµµ ¹®Á¦°¡ µÇÁö´Â ¾ÊÁö¸¸, °ü³äÀº À§
 - if__name__=="__main__":
     ½ÇÇà¹®
   ¢º ÀÌ ¸ğµâ¿¡¼­ runÀ» ÇÑ´Ù¸é, ÀÌ ¸Ş½ÃÁö¸¦ ½ÇÇà / ¸ğµâÈ­ÇØ¼­ ½ÇÇàÇÑ´Ù¸é name -> ¸ğµâ¸í
   ¢º ÆÄÀÌ½ã¿¡¼­ mainÀº ½ÇÇàÇÏ´Â °÷

5. enumerate(list) -> (indexNum, name) -> tuple ¸®ÅÏ

6. eval -> "1+2" -> °á°ú°ª ¸®ÅÏ: ¹®ÀÚ¿­ ³» ¼ö½ÄÀ» ¿¬»ê

7. map(Àû¿ëÇÔ¼ö, Àû¿ëiterable) -> return map°´Ã¼ -> list()¾º¿ö¼­ Ãâ·Â

8. lambda var : °è»ê½Ä

9. sort/sorted()
 - sorted: °ª Á¤·Ä ÈÄ ¸®½ºÆ® ¸®ÅÏ // sorted("str") -> ¾ËÆÄºª ¼ø¼­´ë·Î ÂÉ°³¾î ¿ä¼Ò¸¶´Ù ¸®½ºÆ® ÀúÀå
 - sort: Á¤·Ä ÈÄ ¿ø ÁöÁ¤ º¯¼ö¿¡ ÀúÀå

10. zip()
 ¢ºµ¿ÀÏÇÑ °³¼öÀÇ iteratorµéÀ» ÇÏ³ª·Î ¹­´Â ÇÔ¼ö, (Æ©ÇÃ·Î ¹­´Â´Ù) 
  - ¹­¾îÁø zip obj¸¦ list(), tuple(), dict()·Î È°¿ë °¡´É

11. pickle module
 ¢º °´Ã¼ »óÅÂ¸¦ À¯ÁöÇÏ¸é¼­ ÆÄÀÏÀ» ÀÔÃâ·ÂÇÏ´Â ¸ğµâ
  - open/read (ÆÄÀÏÇü½ÄÀº "wb", "rb")
  - import pickle
  - pickle.dump(obj, file)
  - pickle.load(obj)

12. Á¤±ÔÇ¥Çö½Ä: ÀÏÁ¤ ±ÔÄ¢À» °®´Â ¹®ÀÚ¿­À» Ç¥ÇöÇÏ´Â ¹æ¹ı
 ¢º º¹ÀâÇÑ ¹®ÀÚ¿­¿¡¼­ Æ¯Á¤ ±ÔÄ¢À» ¸¸Á·ÇÏ´Â ¹®ÀÚ¿­À» °Ë»öÇÑ ´ÙÀ½, ÀüÃ³¸®
 ¢º ÁÖ¾îÁø ¹®ÀÚ¿­ÀÌ ±ÔÄ¢¿¡ ¸Â´ÂÁö È®ÀÎ
 - \d+ -> ¿¬°á¼ıÀÚ
 - \d{int} -> ÀÚ¸´¼ö¿¡ ÇØ´çÇÏ´Â ¼ö
 - [1-9]\d* -> [1-9] ÀÌÈÄ 0°³ ÀÌ»óÀÇ ¼ö
 - ? -> ÀÖ°Å³ª ¾ø°Å³ª ex) [- ]? -> °ø¹éÀÌ ÀÖ°Å³ª ¾ø°Å³ª
 - [- ] -> "-" ¹®ÀÚ ÈÄ¿¡ °ø¹é
 - [ - ] ->  "-"
 - 'a.b' -> a¿Í b»çÀÌ¿¡ ¾î¶² ¹®ÀÚ°¡ µé¾î°¡µµ ¸ÅÄª
  ¢º " . " Àº ¸ğµç ¹®ÀÚ¸¦ ÀÇ¹ÌÇÑ´Ù. // a[.]b-> "a.b"ÀÇ ÀÇ¹Ì
 - ÇÑ±Û[°¡-ÆR]
 - \s:°ø¹é // \S:°ø¹éÀ» Á¦¿ÜÇÑ ¸ğµç¹®ÀÚ // \D: ¼ıÀÚÁ¦¿Ü ¹®ÀÚ // \W: ´ëÇ¥¹®ÀÚÁ¦¿Ü ±ÛÀÚ(Æ¯¹®)
 - ex) [xyz] x,y,z Áß ÇÑ °³ÀÇ ¹®ÀÚ¿Í ¸ÅÄ¡ 
¢º re-method
 - sub: ÀÏÄ¡ÇÏ´Â ÆĞÅÏor n°³ÀÇ ÆĞÅÏÀ» ´ëÃ¼·Î Ä¡È¯, ´ëÃ¼ Ç¥Çö ¹®ÀÚ¿­Àº /1, /2 µîÀ¸·Î ¸ÅÄª
  -> pattern(repl, str) // re.sub(pattern, repl, str)
 - match -> ½ÃÀÛÁ¡ºÎÅÍ ¸ÅÄª
   -> ¸Â¾Æ¸é obj // ¾ø´Ù¸é None
 - findall -> ÀüÃ¼ Å½»ö, ¾ø´Ù¸é ºó ¸®½ºÆ® []

13. set
 ¢º var=set()
  - add °¡´É
